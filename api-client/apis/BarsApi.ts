/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Bar,
  PatchedBar,
} from '../models';
import {
    BarFromJSON,
    BarToJSON,
    PatchedBarFromJSON,
    PatchedBarToJSON,
} from '../models';

export interface BarsCreateRequest {
    bar: Bar;
}

export interface BarsDestroyRequest {
    id: number;
}

export interface BarsPartialUpdateRequest {
    id: number;
    patchedBar?: PatchedBar;
}

export interface BarsRetrieveRequest {
    id: number;
}

export interface BarsUpdateRequest {
    id: number;
    bar: Bar;
}

/**
 * 
 */
export class BarsApi extends runtime.BaseAPI {

    /**
     */
    async barsCreateRaw(requestParameters: BarsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Bar>> {
        if (requestParameters.bar === null || requestParameters.bar === undefined) {
            throw new runtime.RequiredError('bar','Required parameter requestParameters.bar was null or undefined when calling barsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/bars/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BarToJSON(requestParameters.bar),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BarFromJSON(jsonValue));
    }

    /**
     */
    async barsCreate(requestParameters: BarsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Bar> {
        const response = await this.barsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async barsDestroyRaw(requestParameters: BarsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling barsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/bars/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async barsDestroy(requestParameters: BarsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.barsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async barsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Bar>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/bars/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BarFromJSON));
    }

    /**
     */
    async barsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Bar>> {
        const response = await this.barsListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async barsPartialUpdateRaw(requestParameters: BarsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Bar>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling barsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/bars/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedBarToJSON(requestParameters.patchedBar),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BarFromJSON(jsonValue));
    }

    /**
     */
    async barsPartialUpdate(requestParameters: BarsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Bar> {
        const response = await this.barsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async barsRetrieveRaw(requestParameters: BarsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Bar>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling barsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/bars/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BarFromJSON(jsonValue));
    }

    /**
     */
    async barsRetrieve(requestParameters: BarsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Bar> {
        const response = await this.barsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async barsUpdateRaw(requestParameters: BarsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Bar>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling barsUpdate.');
        }

        if (requestParameters.bar === null || requestParameters.bar === undefined) {
            throw new runtime.RequiredError('bar','Required parameter requestParameters.bar was null or undefined when calling barsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/bars/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BarToJSON(requestParameters.bar),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BarFromJSON(jsonValue));
    }

    /**
     */
    async barsUpdate(requestParameters: BarsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Bar> {
        const response = await this.barsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
